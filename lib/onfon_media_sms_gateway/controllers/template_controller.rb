# onfon_media_sms_gateway
#
# This file was automatically generated by
# APIMATIC v2.0 ( https://apimatic.io ).

module OnfonMediaSmsGateway
  # TemplateController
  class TemplateController < BaseController
    @instance = TemplateController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Get Template List
    # @return Mixed response from the API call
    def get_template_list
      # Prepare query url.
      _path_url = '/Template'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create New Template
    # @param [String] message_template Required parameter: Template text.
    # @param [String] template_name Required parameter: Name of template
    # @return Mixed response from the API call
    def create_new_template(message_template,
                            template_name)
      # Prepare query url.
      _path_url = '/Template'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }

      # Prepare form parameters.
      _parameters = {
        'MessageTemplate' => message_template,
        'TemplateName' => template_name
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Update Template
    # @param [String] message_template Required parameter: Template text.
    # @param [String] template_name Required parameter: Name of template
    # @param [Integer] id Required parameter: id of template
    # @return Mixed response from the API call
    def update_template(message_template,
                        template_name,
                        id)
      # Prepare query url.
      _path_url = '/Template'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }

      # Prepare form parameters.
      _parameters = {
        'MessageTemplate' => message_template,
        'TemplateName' => template_name,
        'id' => id
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)
      # Prepare and execute HttpRequest.
      _request = @http_client.put(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Delete Template
    # @param [Integer] id Required parameter: id of template
    # @return Mixed response from the API call
    def delete_template(id)
      # Prepare query url.
      _path_url = '/Template'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }

      # Prepare form parameters.
      _parameters = {
        'id' => id
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)
      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
