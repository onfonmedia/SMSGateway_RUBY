# onfon_media_sms_gateway
#
# This file was automatically generated by
# APIMATIC v2.0 ( https://apimatic.io ).

module OnfonMediaSmsGateway
  # GROUPController
  class GROUPController < BaseController
    @instance = GROUPController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Get Group List
    # @return Mixed response from the API call
    def get_group_list
      # Prepare query url.
      _path_url = '/Group'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create New Group
    # @param [String] group_name Required parameter: Name for new group
    # @return Mixed response from the API call
    def create_new_group(group_name)
      # Prepare query url.
      _path_url = '/Group'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'GroupName' => group_name
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Update Group
    # @param [String] group_name Required parameter: Name for new group
    # @param [String] id Required parameter: GroupID
    # @return Mixed response from the API call
    def update_group(group_name,
                     id)
      # Prepare query url.
      _path_url = '/Group'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'id' => id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }

      # Prepare form parameters.
      _parameters = {
        'GroupName' => group_name
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)
      # Prepare and execute HttpRequest.
      _request = @http_client.put(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create Sub-Group Group
    # @param [String] group_name Required parameter: Name for new group
    # @param [String] id Required parameter: Example:
    # @return Mixed response from the API call
    def create_sub_group_group(group_name,
                               id)
      # Prepare query url.
      _path_url = '/Group?{Id}/SubGroup'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'Id' => id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }

      # Prepare form parameters.
      _parameters = {
        'GroupName' => group_name
      }
      _parameters = APIHelper.form_encode_parameters(_parameters)
      # Prepare and execute HttpRequest.
      _request = @http_client.put(
        _query_url,
        headers: _headers,
        parameters: _parameters
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Delete Group
    # @param [Integer] id Required parameter: Example:
    # @return Mixed response from the API call
    def delete_group(id)
      # Prepare query url.
      _path_url = '/Group'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'id' => id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.delete(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
