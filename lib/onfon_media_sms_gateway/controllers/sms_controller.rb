# onfon_media_sms_gateway
#
# This file was automatically generated by
# APIMATIC v2.0 ( https://apimatic.io ).

module OnfonMediaSmsGateway
  # SMSController
  class SMSController < BaseController
    @instance = SMSController.new

    class << self
      attr_accessor :instance
    end

    def instance
      self.class.instance
    end

    # Get Sent Message List
    # @param [Date] enddate Required parameter: Date format must be in
    # yyyy-mm-dd
    # @param [Date] fromdate Required parameter: Date format must be in
    # yyyy-mm-dd
    # @param [Integer] length Required parameter: Ending index value to fetch
    # the campaign detail.
    # @param [Integer] start Required parameter: Starting index value to fetch
    # the campaign detail.
    # @return Mixed response from the API call
    def get_sent_message_list(enddate,
                              fromdate,
                              length,
                              start)
      # Prepare query url.
      _path_url = '/SMS'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'enddate' => enddate,
          'fromdate' => fromdate,
          'length' => length,
          'start' => start
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Get Sent Message Status
    # @param [Integer] message_id Required parameter: MessageId of message
    # @return Mixed response from the API call
    def get_sent_message_status(message_id)
      # Prepare query url.
      _path_url = '/MessageStatus'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'MessageId' => message_id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create SMS
    # @param [String] message Required parameter: text message to send
    # @param [String] mobile_number Required parameter: Use mobile number as
    # comma sepreated to send message on multiple mobile number e.g.
    # 78461230,78945612
    # @param [String] sender_id Required parameter: Approved Sender Id
    # @param [String] co_relator Optional parameter: Parameter required for
    # using SDP OnDemand Service
    # @param [Boolean] is_flash Optional parameter: Is_Flash is true or false
    # for flash message
    # @param [Boolean] is_unicode Optional parameter: Is_Unicode is true or
    # false for unicode message
    # @param [String] link_id Optional parameter: Parameter required for using
    # SDP OnDemand Service
    # @param [String] group_id Optional parameter: Valid group-id of current
    # user (only for group message otherwise leave empty string)
    # @param [String] schedule_time Optional parameter: scheduleTime Date in
    # yyyy-MM-dd HH:MM (only for schedule message)
    # @param [String] service_id Optional parameter: Parameter required for
    # using SDP OnSubscription Service
    # @return Mixed response from the API call
    def get_create_sms(message,
                       mobile_number,
                       sender_id,
                       co_relator = nil,
                       is_flash = nil,
                       is_unicode = nil,
                       link_id = nil,
                       group_id = nil,
                       schedule_time = nil,
                       service_id = nil)
      # Prepare query url.
      _path_url = '/SendSMS'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'Message' => message,
          'MobileNumber' => mobile_number,
          'SenderId' => sender_id,
          'CoRelator' => co_relator,
          'Is_Flash' => is_flash,
          'Is_Unicode' => is_unicode,
          'LinkId' => link_id,
          'groupId' => group_id,
          'scheduleTime' => schedule_time,
          'serviceId' => service_id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create SMS
    # @param [String] message Required parameter: text message to send
    # @param [String] mobile_number Required parameter: Use mobile number as
    # comma sepreated to send message on multiple mobile number e.g.
    # 78461230,78945612
    # @param [String] sender_id Required parameter: Approved Sender Id
    # @param [String] co_relator Optional parameter: Parameter required for
    # using SDP OnDemand Service
    # @param [Boolean] is_flash Optional parameter: Is_Flash is true or false
    # for flash message
    # @param [Boolean] is_unicode Optional parameter: Is_Unicode is true or
    # false for unicode message
    # @param [String] link_id Optional parameter: Parameter required for using
    # SDP OnDemand Service
    # @param [String] group_id Optional parameter: Valid group-id of current
    # user (only for group message otherwise leave empty string)
    # @param [String] schedule_time Optional parameter: scheduleTime Date in
    # yyyy-MM-dd HH:MM (only for schedule message)
    # @param [String] service_id Optional parameter: Parameter required for
    # using SDP OnSubscription Service
    # @return Mixed response from the API call
    def create_sms(message,
                   mobile_number,
                   sender_id,
                   co_relator = nil,
                   is_flash = nil,
                   is_unicode = nil,
                   link_id = nil,
                   group_id = nil,
                   schedule_time = nil,
                   service_id = nil)
      # Prepare query url.
      _path_url = '/SendSMS'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'Message' => message,
        'MobileNumber' => mobile_number,
        'SenderId' => sender_id,
        'CoRelator' => co_relator,
        'Is_Flash' => is_flash,
        'Is_Unicode' => is_unicode,
        'LinkId' => link_id,
        'groupId' => group_id,
        'scheduleTime' => schedule_time,
        'serviceId' => service_id
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create Bulk SMS
    # @param [String] mobile_number_message Required parameter: Please ensure
    # while submitting the request the message should be passed in encoded
    # format. e.g. 78461230^test~78945612^hello
    # @param [String] sender_id Required parameter: Approved Sender Id
    # @param [String] co_relator Optional parameter: Parameter required for
    # using SDP OnDemand Service
    # @param [Boolean] is_flash Optional parameter: Is_Flash is true or false
    # for flash message
    # @param [Boolean] is_unicode Optional parameter: Is_Unicode is true or
    # false for unicode message
    # @param [String] link_id Optional parameter: Parameter required for using
    # SDP OnDemand Service
    # @param [Date] schedule_time Optional parameter: scheduleTime Date in
    # yyyy-MM-dd HH:MM (only for schedule message)
    # @param [String] service_id Optional parameter: Parameter required for
    # using SDP OnSubscription Service
    # @return Mixed response from the API call
    def get_create_bulk_sms(mobile_number_message,
                            sender_id,
                            co_relator = nil,
                            is_flash = nil,
                            is_unicode = nil,
                            link_id = nil,
                            schedule_time = nil,
                            service_id = nil)
      # Prepare query url.
      _path_url = '/SendBulkSMS'
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'MobileNumber_Message' => mobile_number_message,
          'SenderId' => sender_id,
          'CoRelator' => co_relator,
          'Is_Flash' => is_flash,
          'Is_Unicode' => is_unicode,
          'LinkId' => link_id,
          'scheduleTime' => schedule_time,
          'serviceId' => service_id
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.get(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end

    # Create Bulk SMS
    # @param [List of String] message_parameters Required parameter: Example:
    # @param [String] sender_id Required parameter: Approved Sender Id
    # @param [Boolean] is_flash Optional parameter: Is_Flash is true or false
    # for flash message
    # @param [Boolean] is_unicode Optional parameter: Is_Unicode is true or
    # false for unicode message
    # @param [Date] schedule_date_time Optional parameter: scheduleTime Date in
    # yyyy-MM-dd HH:MM (only for schedule message)
    # @return Mixed response from the API call
    def create_bulk_sms(message_parameters,
                        sender_id,
                        is_flash = nil,
                        is_unicode = nil,
                        schedule_date_time = nil)
      # Prepare query url.
      _path_url = '/SendBulkSMS'
      _path_url = APIHelper.append_url_with_template_parameters(
        _path_url,
        'MessageParameters' => message_parameters,
        'ScheduleDateTime' => schedule_date_time
      )
      _query_builder = Configuration.base_uri.dup
      _query_builder << _path_url
      _query_builder = APIHelper.append_url_with_query_parameters(
        _query_builder,
        {
          'SenderId' => sender_id,
          'Is_Flash' => is_flash,
          'Is_Unicode' => is_unicode
        },
        array_serialization: Configuration.array_serialization
      )
      _query_url = APIHelper.clean_url _query_builder
      # Prepare headers.
      _headers = {
        'accept' => 'application/json',
        'AccessKey' => Configuration.access_key
      }
      # Prepare and execute HttpRequest.
      _request = @http_client.post(
        _query_url,
        headers: _headers
      )
      CustomQueryAuth.apply(_request)
      _context = execute_request(_request)
      validate_response(_context)
      # Return appropriate response type.
      decoded = APIHelper.json_deserialize(_context.response.raw_body) unless
        _context.response.raw_body.nil? ||
        _context.response.raw_body.to_s.strip.empty?
      decoded
    end
  end
end
